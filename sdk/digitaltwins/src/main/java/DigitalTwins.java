/**
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package digitaltwins;

import .models.DigitalTwinsAddHeaders;
import .models.DigitalTwinsAddRelationshipHeaders;
import .models.DigitalTwinsGetByIdHeaders;
import .models.DigitalTwinsGetComponentHeaders;
import .models.DigitalTwinsGetRelationshipByIdHeaders;
import .models.DigitalTwinsUpdateComponentHeaders;
import .models.DigitalTwinsUpdateHeaders;
import .models.DigitalTwinsUpdateRelationshipHeaders;
import .models.ErrorResponseException;
import .models.IncomingRelationshipCollection;
import .models.RelationshipCollection;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.ServiceResponseWithHeaders;
import java.io.IOException;
import java.util.List;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in DigitalTwins.
 */
public interface DigitalTwins {
    /**
     * Retrieves a digital twin.
     Status codes:
     200 (OK): Success.
     404 (Not Found): There is no digital twin with the provided id.
     *
     * @param id The id of the digital twin. The id is unique within the service and case sensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object getById(String id);

    /**
     * Retrieves a digital twin.
     Status codes:
     200 (OK): Success.
     404 (Not Found): There is no digital twin with the provided id.
     *
     * @param id The id of the digital twin. The id is unique within the service and case sensitive.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> getByIdAsync(String id, final ServiceCallback<Object> serviceCallback);

    /**
     * Retrieves a digital twin.
     Status codes:
     200 (OK): Success.
     404 (Not Found): There is no digital twin with the provided id.
     *
     * @param id The id of the digital twin. The id is unique within the service and case sensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> getByIdAsync(String id);

    /**
     * Retrieves a digital twin.
     Status codes:
     200 (OK): Success.
     404 (Not Found): There is no digital twin with the provided id.
     *
     * @param id The id of the digital twin. The id is unique within the service and case sensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponseWithHeaders<Object, DigitalTwinsGetByIdHeaders>> getByIdWithServiceResponseAsync(String id);

    /**
     * Adds or replaces a digital twin.
     Status codes:
     200 (OK): Success.
     400 (Bad Request): The request is invalid.
     412 (Precondition Failed): The model is decommissioned or the digital twin already exists (when using If-None-Match: *).
     *
     * @param id The id of the digital twin. The id is unique within the service and case sensitive.
     * @param twin The digital twin instance being added. If provided, the $dtId property is ignored.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object add(String id, Object twin);

    /**
     * Adds or replaces a digital twin.
     Status codes:
     200 (OK): Success.
     400 (Bad Request): The request is invalid.
     412 (Precondition Failed): The model is decommissioned or the digital twin already exists (when using If-None-Match: *).
     *
     * @param id The id of the digital twin. The id is unique within the service and case sensitive.
     * @param twin The digital twin instance being added. If provided, the $dtId property is ignored.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> addAsync(String id, Object twin, final ServiceCallback<Object> serviceCallback);

    /**
     * Adds or replaces a digital twin.
     Status codes:
     200 (OK): Success.
     400 (Bad Request): The request is invalid.
     412 (Precondition Failed): The model is decommissioned or the digital twin already exists (when using If-None-Match: *).
     *
     * @param id The id of the digital twin. The id is unique within the service and case sensitive.
     * @param twin The digital twin instance being added. If provided, the $dtId property is ignored.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> addAsync(String id, Object twin);

    /**
     * Adds or replaces a digital twin.
     Status codes:
     200 (OK): Success.
     400 (Bad Request): The request is invalid.
     412 (Precondition Failed): The model is decommissioned or the digital twin already exists (when using If-None-Match: *).
     *
     * @param id The id of the digital twin. The id is unique within the service and case sensitive.
     * @param twin The digital twin instance being added. If provided, the $dtId property is ignored.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponseWithHeaders<Object, DigitalTwinsAddHeaders>> addWithServiceResponseAsync(String id, Object twin);
    /**
     * Adds or replaces a digital twin.
     Status codes:
     200 (OK): Success.
     400 (Bad Request): The request is invalid.
     412 (Precondition Failed): The model is decommissioned or the digital twin already exists (when using If-None-Match: *).
     *
     * @param id The id of the digital twin. The id is unique within the service and case sensitive.
     * @param twin The digital twin instance being added. If provided, the $dtId property is ignored.
     * @param ifNoneMatch Only perform the operation if the entity does not already exist. Possible values include: '*'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object add(String id, Object twin, String ifNoneMatch);

    /**
     * Adds or replaces a digital twin.
     Status codes:
     200 (OK): Success.
     400 (Bad Request): The request is invalid.
     412 (Precondition Failed): The model is decommissioned or the digital twin already exists (when using If-None-Match: *).
     *
     * @param id The id of the digital twin. The id is unique within the service and case sensitive.
     * @param twin The digital twin instance being added. If provided, the $dtId property is ignored.
     * @param ifNoneMatch Only perform the operation if the entity does not already exist. Possible values include: '*'
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> addAsync(String id, Object twin, String ifNoneMatch, final ServiceCallback<Object> serviceCallback);

    /**
     * Adds or replaces a digital twin.
     Status codes:
     200 (OK): Success.
     400 (Bad Request): The request is invalid.
     412 (Precondition Failed): The model is decommissioned or the digital twin already exists (when using If-None-Match: *).
     *
     * @param id The id of the digital twin. The id is unique within the service and case sensitive.
     * @param twin The digital twin instance being added. If provided, the $dtId property is ignored.
     * @param ifNoneMatch Only perform the operation if the entity does not already exist. Possible values include: '*'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> addAsync(String id, Object twin, String ifNoneMatch);

    /**
     * Adds or replaces a digital twin.
     Status codes:
     200 (OK): Success.
     400 (Bad Request): The request is invalid.
     412 (Precondition Failed): The model is decommissioned or the digital twin already exists (when using If-None-Match: *).
     *
     * @param id The id of the digital twin. The id is unique within the service and case sensitive.
     * @param twin The digital twin instance being added. If provided, the $dtId property is ignored.
     * @param ifNoneMatch Only perform the operation if the entity does not already exist. Possible values include: '*'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponseWithHeaders<Object, DigitalTwinsAddHeaders>> addWithServiceResponseAsync(String id, Object twin, String ifNoneMatch);

    /**
     * Deletes a digital twin. All relationships referencing the digital twin must already be deleted.
     Status codes:
     200 (OK): Success.
     400 (Bad Request): The request is invalid.
     404 (Not Found): There is no digital twin with the provided id.
     *
     * @param id The id of the digital twin. The id is unique within the service and case sensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    void delete(String id);

    /**
     * Deletes a digital twin. All relationships referencing the digital twin must already be deleted.
     Status codes:
     200 (OK): Success.
     400 (Bad Request): The request is invalid.
     404 (Not Found): There is no digital twin with the provided id.
     *
     * @param id The id of the digital twin. The id is unique within the service and case sensitive.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Void> deleteAsync(String id, final ServiceCallback<Void> serviceCallback);

    /**
     * Deletes a digital twin. All relationships referencing the digital twin must already be deleted.
     Status codes:
     200 (OK): Success.
     400 (Bad Request): The request is invalid.
     404 (Not Found): There is no digital twin with the provided id.
     *
     * @param id The id of the digital twin. The id is unique within the service and case sensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> deleteAsync(String id);

    /**
     * Deletes a digital twin. All relationships referencing the digital twin must already be deleted.
     Status codes:
     200 (OK): Success.
     400 (Bad Request): The request is invalid.
     404 (Not Found): There is no digital twin with the provided id.
     *
     * @param id The id of the digital twin. The id is unique within the service and case sensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> deleteWithServiceResponseAsync(String id);
    /**
     * Deletes a digital twin. All relationships referencing the digital twin must already be deleted.
     Status codes:
     200 (OK): Success.
     400 (Bad Request): The request is invalid.
     404 (Not Found): There is no digital twin with the provided id.
     *
     * @param id The id of the digital twin. The id is unique within the service and case sensitive.
     * @param ifMatch Only perform the operation if the entity's etag matches one of the etags provided or * is provided.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    void delete(String id, String ifMatch);

    /**
     * Deletes a digital twin. All relationships referencing the digital twin must already be deleted.
     Status codes:
     200 (OK): Success.
     400 (Bad Request): The request is invalid.
     404 (Not Found): There is no digital twin with the provided id.
     *
     * @param id The id of the digital twin. The id is unique within the service and case sensitive.
     * @param ifMatch Only perform the operation if the entity's etag matches one of the etags provided or * is provided.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Void> deleteAsync(String id, String ifMatch, final ServiceCallback<Void> serviceCallback);

    /**
     * Deletes a digital twin. All relationships referencing the digital twin must already be deleted.
     Status codes:
     200 (OK): Success.
     400 (Bad Request): The request is invalid.
     404 (Not Found): There is no digital twin with the provided id.
     *
     * @param id The id of the digital twin. The id is unique within the service and case sensitive.
     * @param ifMatch Only perform the operation if the entity's etag matches one of the etags provided or * is provided.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> deleteAsync(String id, String ifMatch);

    /**
     * Deletes a digital twin. All relationships referencing the digital twin must already be deleted.
     Status codes:
     200 (OK): Success.
     400 (Bad Request): The request is invalid.
     404 (Not Found): There is no digital twin with the provided id.
     *
     * @param id The id of the digital twin. The id is unique within the service and case sensitive.
     * @param ifMatch Only perform the operation if the entity's etag matches one of the etags provided or * is provided.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> deleteWithServiceResponseAsync(String id, String ifMatch);

    /**
     * Updates a digital twin.
     Status codes:
     200 (OK): Success.
     400 (Bad Request): The request is invalid.
     404 (Not Found): There is no digital twin with the provided id.
     *
     * @param id The id of the digital twin. The id is unique within the service and case sensitive.
     * @param patchDocument An update specification described by JSON Patch. Updates to property values and $model elements may happen in the same request. Operations are limited to add, replace and remove.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    void update(String id, List<Object> patchDocument);

    /**
     * Updates a digital twin.
     Status codes:
     200 (OK): Success.
     400 (Bad Request): The request is invalid.
     404 (Not Found): There is no digital twin with the provided id.
     *
     * @param id The id of the digital twin. The id is unique within the service and case sensitive.
     * @param patchDocument An update specification described by JSON Patch. Updates to property values and $model elements may happen in the same request. Operations are limited to add, replace and remove.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Void> updateAsync(String id, List<Object> patchDocument, final ServiceCallback<Void> serviceCallback);

    /**
     * Updates a digital twin.
     Status codes:
     200 (OK): Success.
     400 (Bad Request): The request is invalid.
     404 (Not Found): There is no digital twin with the provided id.
     *
     * @param id The id of the digital twin. The id is unique within the service and case sensitive.
     * @param patchDocument An update specification described by JSON Patch. Updates to property values and $model elements may happen in the same request. Operations are limited to add, replace and remove.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponseWithHeaders} object if successful.
     */
    Observable<Void> updateAsync(String id, List<Object> patchDocument);

    /**
     * Updates a digital twin.
     Status codes:
     200 (OK): Success.
     400 (Bad Request): The request is invalid.
     404 (Not Found): There is no digital twin with the provided id.
     *
     * @param id The id of the digital twin. The id is unique within the service and case sensitive.
     * @param patchDocument An update specification described by JSON Patch. Updates to property values and $model elements may happen in the same request. Operations are limited to add, replace and remove.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponseWithHeaders} object if successful.
     */
    Observable<ServiceResponseWithHeaders<Void, DigitalTwinsUpdateHeaders>> updateWithServiceResponseAsync(String id, List<Object> patchDocument);
    /**
     * Updates a digital twin.
     Status codes:
     200 (OK): Success.
     400 (Bad Request): The request is invalid.
     404 (Not Found): There is no digital twin with the provided id.
     *
     * @param id The id of the digital twin. The id is unique within the service and case sensitive.
     * @param patchDocument An update specification described by JSON Patch. Updates to property values and $model elements may happen in the same request. Operations are limited to add, replace and remove.
     * @param ifMatch Only perform the operation if the entity's etag matches one of the etags provided or * is provided.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    void update(String id, List<Object> patchDocument, String ifMatch);

    /**
     * Updates a digital twin.
     Status codes:
     200 (OK): Success.
     400 (Bad Request): The request is invalid.
     404 (Not Found): There is no digital twin with the provided id.
     *
     * @param id The id of the digital twin. The id is unique within the service and case sensitive.
     * @param patchDocument An update specification described by JSON Patch. Updates to property values and $model elements may happen in the same request. Operations are limited to add, replace and remove.
     * @param ifMatch Only perform the operation if the entity's etag matches one of the etags provided or * is provided.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Void> updateAsync(String id, List<Object> patchDocument, String ifMatch, final ServiceCallback<Void> serviceCallback);

    /**
     * Updates a digital twin.
     Status codes:
     200 (OK): Success.
     400 (Bad Request): The request is invalid.
     404 (Not Found): There is no digital twin with the provided id.
     *
     * @param id The id of the digital twin. The id is unique within the service and case sensitive.
     * @param patchDocument An update specification described by JSON Patch. Updates to property values and $model elements may happen in the same request. Operations are limited to add, replace and remove.
     * @param ifMatch Only perform the operation if the entity's etag matches one of the etags provided or * is provided.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponseWithHeaders} object if successful.
     */
    Observable<Void> updateAsync(String id, List<Object> patchDocument, String ifMatch);

    /**
     * Updates a digital twin.
     Status codes:
     200 (OK): Success.
     400 (Bad Request): The request is invalid.
     404 (Not Found): There is no digital twin with the provided id.
     *
     * @param id The id of the digital twin. The id is unique within the service and case sensitive.
     * @param patchDocument An update specification described by JSON Patch. Updates to property values and $model elements may happen in the same request. Operations are limited to add, replace and remove.
     * @param ifMatch Only perform the operation if the entity's etag matches one of the etags provided or * is provided.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponseWithHeaders} object if successful.
     */
    Observable<ServiceResponseWithHeaders<Void, DigitalTwinsUpdateHeaders>> updateWithServiceResponseAsync(String id, List<Object> patchDocument, String ifMatch);

    /**
     * Retrieves a relationship between two digital twins.
     Status codes:
     200 (OK): Success.
     404 (Not Found): There is either no digital twin or relationship with the provided id.
     *
     * @param id The id of the digital twin. The id is unique within the service and case sensitive.
     * @param relationshipId The id of the relationship. The id is unique within the digital twin and case sensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object getRelationshipById(String id, String relationshipId);

    /**
     * Retrieves a relationship between two digital twins.
     Status codes:
     200 (OK): Success.
     404 (Not Found): There is either no digital twin or relationship with the provided id.
     *
     * @param id The id of the digital twin. The id is unique within the service and case sensitive.
     * @param relationshipId The id of the relationship. The id is unique within the digital twin and case sensitive.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> getRelationshipByIdAsync(String id, String relationshipId, final ServiceCallback<Object> serviceCallback);

    /**
     * Retrieves a relationship between two digital twins.
     Status codes:
     200 (OK): Success.
     404 (Not Found): There is either no digital twin or relationship with the provided id.
     *
     * @param id The id of the digital twin. The id is unique within the service and case sensitive.
     * @param relationshipId The id of the relationship. The id is unique within the digital twin and case sensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> getRelationshipByIdAsync(String id, String relationshipId);

    /**
     * Retrieves a relationship between two digital twins.
     Status codes:
     200 (OK): Success.
     404 (Not Found): There is either no digital twin or relationship with the provided id.
     *
     * @param id The id of the digital twin. The id is unique within the service and case sensitive.
     * @param relationshipId The id of the relationship. The id is unique within the digital twin and case sensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponseWithHeaders<Object, DigitalTwinsGetRelationshipByIdHeaders>> getRelationshipByIdWithServiceResponseAsync(String id, String relationshipId);

    /**
     * Adds a relationship between two digital twins.
     Status codes:
     200 (OK): Success.
     400 (Bad Request): The request is invalid.
     404 (Not Found): There is either no digital twin, target digital twin, or relationship with the provided id.
     409 (Conflict): A relationship with the provided id already exists.
     *
     * @param id The id of the digital twin. The id is unique within the service and case sensitive.
     * @param relationshipId The id of the relationship. The id is unique within the digital twin and case sensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object addRelationship(String id, String relationshipId);

    /**
     * Adds a relationship between two digital twins.
     Status codes:
     200 (OK): Success.
     400 (Bad Request): The request is invalid.
     404 (Not Found): There is either no digital twin, target digital twin, or relationship with the provided id.
     409 (Conflict): A relationship with the provided id already exists.
     *
     * @param id The id of the digital twin. The id is unique within the service and case sensitive.
     * @param relationshipId The id of the relationship. The id is unique within the digital twin and case sensitive.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> addRelationshipAsync(String id, String relationshipId, final ServiceCallback<Object> serviceCallback);

    /**
     * Adds a relationship between two digital twins.
     Status codes:
     200 (OK): Success.
     400 (Bad Request): The request is invalid.
     404 (Not Found): There is either no digital twin, target digital twin, or relationship with the provided id.
     409 (Conflict): A relationship with the provided id already exists.
     *
     * @param id The id of the digital twin. The id is unique within the service and case sensitive.
     * @param relationshipId The id of the relationship. The id is unique within the digital twin and case sensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> addRelationshipAsync(String id, String relationshipId);

    /**
     * Adds a relationship between two digital twins.
     Status codes:
     200 (OK): Success.
     400 (Bad Request): The request is invalid.
     404 (Not Found): There is either no digital twin, target digital twin, or relationship with the provided id.
     409 (Conflict): A relationship with the provided id already exists.
     *
     * @param id The id of the digital twin. The id is unique within the service and case sensitive.
     * @param relationshipId The id of the relationship. The id is unique within the digital twin and case sensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponseWithHeaders<Object, DigitalTwinsAddRelationshipHeaders>> addRelationshipWithServiceResponseAsync(String id, String relationshipId);
    /**
     * Adds a relationship between two digital twins.
     Status codes:
     200 (OK): Success.
     400 (Bad Request): The request is invalid.
     404 (Not Found): There is either no digital twin, target digital twin, or relationship with the provided id.
     409 (Conflict): A relationship with the provided id already exists.
     *
     * @param id The id of the digital twin. The id is unique within the service and case sensitive.
     * @param relationshipId The id of the relationship. The id is unique within the digital twin and case sensitive.
     * @param relationship The data for the relationship.
     * @param ifNoneMatch Only perform the operation if the entity does not already exist. Possible values include: '*'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object addRelationship(String id, String relationshipId, Object relationship, String ifNoneMatch);

    /**
     * Adds a relationship between two digital twins.
     Status codes:
     200 (OK): Success.
     400 (Bad Request): The request is invalid.
     404 (Not Found): There is either no digital twin, target digital twin, or relationship with the provided id.
     409 (Conflict): A relationship with the provided id already exists.
     *
     * @param id The id of the digital twin. The id is unique within the service and case sensitive.
     * @param relationshipId The id of the relationship. The id is unique within the digital twin and case sensitive.
     * @param relationship The data for the relationship.
     * @param ifNoneMatch Only perform the operation if the entity does not already exist. Possible values include: '*'
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> addRelationshipAsync(String id, String relationshipId, Object relationship, String ifNoneMatch, final ServiceCallback<Object> serviceCallback);

    /**
     * Adds a relationship between two digital twins.
     Status codes:
     200 (OK): Success.
     400 (Bad Request): The request is invalid.
     404 (Not Found): There is either no digital twin, target digital twin, or relationship with the provided id.
     409 (Conflict): A relationship with the provided id already exists.
     *
     * @param id The id of the digital twin. The id is unique within the service and case sensitive.
     * @param relationshipId The id of the relationship. The id is unique within the digital twin and case sensitive.
     * @param relationship The data for the relationship.
     * @param ifNoneMatch Only perform the operation if the entity does not already exist. Possible values include: '*'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> addRelationshipAsync(String id, String relationshipId, Object relationship, String ifNoneMatch);

    /**
     * Adds a relationship between two digital twins.
     Status codes:
     200 (OK): Success.
     400 (Bad Request): The request is invalid.
     404 (Not Found): There is either no digital twin, target digital twin, or relationship with the provided id.
     409 (Conflict): A relationship with the provided id already exists.
     *
     * @param id The id of the digital twin. The id is unique within the service and case sensitive.
     * @param relationshipId The id of the relationship. The id is unique within the digital twin and case sensitive.
     * @param relationship The data for the relationship.
     * @param ifNoneMatch Only perform the operation if the entity does not already exist. Possible values include: '*'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponseWithHeaders<Object, DigitalTwinsAddRelationshipHeaders>> addRelationshipWithServiceResponseAsync(String id, String relationshipId, Object relationship, String ifNoneMatch);

    /**
     * Deletes a relationship between two digital twins.
     Status codes:
     200 (OK): Success.
     404 (Not Found): There is either no digital twin or relationship with the provided id.
     *
     * @param id The id of the digital twin. The id is unique within the service and case sensitive.
     * @param relationshipId The id of the relationship. The id is unique within the digital twin and case sensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    void deleteRelationship(String id, String relationshipId);

    /**
     * Deletes a relationship between two digital twins.
     Status codes:
     200 (OK): Success.
     404 (Not Found): There is either no digital twin or relationship with the provided id.
     *
     * @param id The id of the digital twin. The id is unique within the service and case sensitive.
     * @param relationshipId The id of the relationship. The id is unique within the digital twin and case sensitive.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Void> deleteRelationshipAsync(String id, String relationshipId, final ServiceCallback<Void> serviceCallback);

    /**
     * Deletes a relationship between two digital twins.
     Status codes:
     200 (OK): Success.
     404 (Not Found): There is either no digital twin or relationship with the provided id.
     *
     * @param id The id of the digital twin. The id is unique within the service and case sensitive.
     * @param relationshipId The id of the relationship. The id is unique within the digital twin and case sensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> deleteRelationshipAsync(String id, String relationshipId);

    /**
     * Deletes a relationship between two digital twins.
     Status codes:
     200 (OK): Success.
     404 (Not Found): There is either no digital twin or relationship with the provided id.
     *
     * @param id The id of the digital twin. The id is unique within the service and case sensitive.
     * @param relationshipId The id of the relationship. The id is unique within the digital twin and case sensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> deleteRelationshipWithServiceResponseAsync(String id, String relationshipId);
    /**
     * Deletes a relationship between two digital twins.
     Status codes:
     200 (OK): Success.
     404 (Not Found): There is either no digital twin or relationship with the provided id.
     *
     * @param id The id of the digital twin. The id is unique within the service and case sensitive.
     * @param relationshipId The id of the relationship. The id is unique within the digital twin and case sensitive.
     * @param ifMatch Only perform the operation if the entity's etag matches one of the etags provided or * is provided.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    void deleteRelationship(String id, String relationshipId, String ifMatch);

    /**
     * Deletes a relationship between two digital twins.
     Status codes:
     200 (OK): Success.
     404 (Not Found): There is either no digital twin or relationship with the provided id.
     *
     * @param id The id of the digital twin. The id is unique within the service and case sensitive.
     * @param relationshipId The id of the relationship. The id is unique within the digital twin and case sensitive.
     * @param ifMatch Only perform the operation if the entity's etag matches one of the etags provided or * is provided.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Void> deleteRelationshipAsync(String id, String relationshipId, String ifMatch, final ServiceCallback<Void> serviceCallback);

    /**
     * Deletes a relationship between two digital twins.
     Status codes:
     200 (OK): Success.
     404 (Not Found): There is either no digital twin or relationship with the provided id.
     *
     * @param id The id of the digital twin. The id is unique within the service and case sensitive.
     * @param relationshipId The id of the relationship. The id is unique within the digital twin and case sensitive.
     * @param ifMatch Only perform the operation if the entity's etag matches one of the etags provided or * is provided.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> deleteRelationshipAsync(String id, String relationshipId, String ifMatch);

    /**
     * Deletes a relationship between two digital twins.
     Status codes:
     200 (OK): Success.
     404 (Not Found): There is either no digital twin or relationship with the provided id.
     *
     * @param id The id of the digital twin. The id is unique within the service and case sensitive.
     * @param relationshipId The id of the relationship. The id is unique within the digital twin and case sensitive.
     * @param ifMatch Only perform the operation if the entity's etag matches one of the etags provided or * is provided.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> deleteRelationshipWithServiceResponseAsync(String id, String relationshipId, String ifMatch);

    /**
     * Updates the properties on a relationship between two digital twins.
     Status codes:
     200 (OK): Success.
     400 (Bad Request): The request is invalid.
     404 (Not Found): There is either no digital twin or relationship with the provided id.
     *
     * @param id The id of the digital twin. The id is unique within the service and case sensitive.
     * @param relationshipId The id of the relationship. The id is unique within the digital twin and case sensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    void updateRelationship(String id, String relationshipId);

    /**
     * Updates the properties on a relationship between two digital twins.
     Status codes:
     200 (OK): Success.
     400 (Bad Request): The request is invalid.
     404 (Not Found): There is either no digital twin or relationship with the provided id.
     *
     * @param id The id of the digital twin. The id is unique within the service and case sensitive.
     * @param relationshipId The id of the relationship. The id is unique within the digital twin and case sensitive.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Void> updateRelationshipAsync(String id, String relationshipId, final ServiceCallback<Void> serviceCallback);

    /**
     * Updates the properties on a relationship between two digital twins.
     Status codes:
     200 (OK): Success.
     400 (Bad Request): The request is invalid.
     404 (Not Found): There is either no digital twin or relationship with the provided id.
     *
     * @param id The id of the digital twin. The id is unique within the service and case sensitive.
     * @param relationshipId The id of the relationship. The id is unique within the digital twin and case sensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponseWithHeaders} object if successful.
     */
    Observable<Void> updateRelationshipAsync(String id, String relationshipId);

    /**
     * Updates the properties on a relationship between two digital twins.
     Status codes:
     200 (OK): Success.
     400 (Bad Request): The request is invalid.
     404 (Not Found): There is either no digital twin or relationship with the provided id.
     *
     * @param id The id of the digital twin. The id is unique within the service and case sensitive.
     * @param relationshipId The id of the relationship. The id is unique within the digital twin and case sensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponseWithHeaders} object if successful.
     */
    Observable<ServiceResponseWithHeaders<Void, DigitalTwinsUpdateRelationshipHeaders>> updateRelationshipWithServiceResponseAsync(String id, String relationshipId);
    /**
     * Updates the properties on a relationship between two digital twins.
     Status codes:
     200 (OK): Success.
     400 (Bad Request): The request is invalid.
     404 (Not Found): There is either no digital twin or relationship with the provided id.
     *
     * @param id The id of the digital twin. The id is unique within the service and case sensitive.
     * @param relationshipId The id of the relationship. The id is unique within the digital twin and case sensitive.
     * @param patchDocument JSON Patch description of the update to the relationship properties.
     * @param ifMatch Only perform the operation if the entity's etag matches one of the etags provided or * is provided.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    void updateRelationship(String id, String relationshipId, List<Object> patchDocument, String ifMatch);

    /**
     * Updates the properties on a relationship between two digital twins.
     Status codes:
     200 (OK): Success.
     400 (Bad Request): The request is invalid.
     404 (Not Found): There is either no digital twin or relationship with the provided id.
     *
     * @param id The id of the digital twin. The id is unique within the service and case sensitive.
     * @param relationshipId The id of the relationship. The id is unique within the digital twin and case sensitive.
     * @param patchDocument JSON Patch description of the update to the relationship properties.
     * @param ifMatch Only perform the operation if the entity's etag matches one of the etags provided or * is provided.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Void> updateRelationshipAsync(String id, String relationshipId, List<Object> patchDocument, String ifMatch, final ServiceCallback<Void> serviceCallback);

    /**
     * Updates the properties on a relationship between two digital twins.
     Status codes:
     200 (OK): Success.
     400 (Bad Request): The request is invalid.
     404 (Not Found): There is either no digital twin or relationship with the provided id.
     *
     * @param id The id of the digital twin. The id is unique within the service and case sensitive.
     * @param relationshipId The id of the relationship. The id is unique within the digital twin and case sensitive.
     * @param patchDocument JSON Patch description of the update to the relationship properties.
     * @param ifMatch Only perform the operation if the entity's etag matches one of the etags provided or * is provided.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponseWithHeaders} object if successful.
     */
    Observable<Void> updateRelationshipAsync(String id, String relationshipId, List<Object> patchDocument, String ifMatch);

    /**
     * Updates the properties on a relationship between two digital twins.
     Status codes:
     200 (OK): Success.
     400 (Bad Request): The request is invalid.
     404 (Not Found): There is either no digital twin or relationship with the provided id.
     *
     * @param id The id of the digital twin. The id is unique within the service and case sensitive.
     * @param relationshipId The id of the relationship. The id is unique within the digital twin and case sensitive.
     * @param patchDocument JSON Patch description of the update to the relationship properties.
     * @param ifMatch Only perform the operation if the entity's etag matches one of the etags provided or * is provided.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponseWithHeaders} object if successful.
     */
    Observable<ServiceResponseWithHeaders<Void, DigitalTwinsUpdateRelationshipHeaders>> updateRelationshipWithServiceResponseAsync(String id, String relationshipId, List<Object> patchDocument, String ifMatch);

    /**
     * Retrieves the relationships from a digital twin.
     Status codes:
     200 (OK): Success.
     400 (Bad Request): The request is invalid.
     404 (Not Found): There is no digital twin with the provided id.
     *
     * @param id The id of the digital twin. The id is unique within the service and case sensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the RelationshipCollection object if successful.
     */
    RelationshipCollection listRelationships(String id);

    /**
     * Retrieves the relationships from a digital twin.
     Status codes:
     200 (OK): Success.
     400 (Bad Request): The request is invalid.
     404 (Not Found): There is no digital twin with the provided id.
     *
     * @param id The id of the digital twin. The id is unique within the service and case sensitive.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<RelationshipCollection> listRelationshipsAsync(String id, final ServiceCallback<RelationshipCollection> serviceCallback);

    /**
     * Retrieves the relationships from a digital twin.
     Status codes:
     200 (OK): Success.
     400 (Bad Request): The request is invalid.
     404 (Not Found): There is no digital twin with the provided id.
     *
     * @param id The id of the digital twin. The id is unique within the service and case sensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the RelationshipCollection object
     */
    Observable<RelationshipCollection> listRelationshipsAsync(String id);

    /**
     * Retrieves the relationships from a digital twin.
     Status codes:
     200 (OK): Success.
     400 (Bad Request): The request is invalid.
     404 (Not Found): There is no digital twin with the provided id.
     *
     * @param id The id of the digital twin. The id is unique within the service and case sensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the RelationshipCollection object
     */
    Observable<ServiceResponse<RelationshipCollection>> listRelationshipsWithServiceResponseAsync(String id);
    /**
     * Retrieves the relationships from a digital twin.
     Status codes:
     200 (OK): Success.
     400 (Bad Request): The request is invalid.
     404 (Not Found): There is no digital twin with the provided id.
     *
     * @param id The id of the digital twin. The id is unique within the service and case sensitive.
     * @param relationshipName The name of the relationship.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the RelationshipCollection object if successful.
     */
    RelationshipCollection listRelationships(String id, String relationshipName);

    /**
     * Retrieves the relationships from a digital twin.
     Status codes:
     200 (OK): Success.
     400 (Bad Request): The request is invalid.
     404 (Not Found): There is no digital twin with the provided id.
     *
     * @param id The id of the digital twin. The id is unique within the service and case sensitive.
     * @param relationshipName The name of the relationship.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<RelationshipCollection> listRelationshipsAsync(String id, String relationshipName, final ServiceCallback<RelationshipCollection> serviceCallback);

    /**
     * Retrieves the relationships from a digital twin.
     Status codes:
     200 (OK): Success.
     400 (Bad Request): The request is invalid.
     404 (Not Found): There is no digital twin with the provided id.
     *
     * @param id The id of the digital twin. The id is unique within the service and case sensitive.
     * @param relationshipName The name of the relationship.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the RelationshipCollection object
     */
    Observable<RelationshipCollection> listRelationshipsAsync(String id, String relationshipName);

    /**
     * Retrieves the relationships from a digital twin.
     Status codes:
     200 (OK): Success.
     400 (Bad Request): The request is invalid.
     404 (Not Found): There is no digital twin with the provided id.
     *
     * @param id The id of the digital twin. The id is unique within the service and case sensitive.
     * @param relationshipName The name of the relationship.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the RelationshipCollection object
     */
    Observable<ServiceResponse<RelationshipCollection>> listRelationshipsWithServiceResponseAsync(String id, String relationshipName);

    /**
     * Retrieves all incoming relationship for a digital twin.
     Status codes:
     200 (OK): Success.
     400 (Bad Request): The request is invalid.
     404 (Not Found): There is no digital twin with the provided id.
     *
     * @param id The id of the digital twin. The id is unique within the service and case sensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the IncomingRelationshipCollection object if successful.
     */
    IncomingRelationshipCollection listIncomingRelationships(String id);

    /**
     * Retrieves all incoming relationship for a digital twin.
     Status codes:
     200 (OK): Success.
     400 (Bad Request): The request is invalid.
     404 (Not Found): There is no digital twin with the provided id.
     *
     * @param id The id of the digital twin. The id is unique within the service and case sensitive.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<IncomingRelationshipCollection> listIncomingRelationshipsAsync(String id, final ServiceCallback<IncomingRelationshipCollection> serviceCallback);

    /**
     * Retrieves all incoming relationship for a digital twin.
     Status codes:
     200 (OK): Success.
     400 (Bad Request): The request is invalid.
     404 (Not Found): There is no digital twin with the provided id.
     *
     * @param id The id of the digital twin. The id is unique within the service and case sensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the IncomingRelationshipCollection object
     */
    Observable<IncomingRelationshipCollection> listIncomingRelationshipsAsync(String id);

    /**
     * Retrieves all incoming relationship for a digital twin.
     Status codes:
     200 (OK): Success.
     400 (Bad Request): The request is invalid.
     404 (Not Found): There is no digital twin with the provided id.
     *
     * @param id The id of the digital twin. The id is unique within the service and case sensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the IncomingRelationshipCollection object
     */
    Observable<ServiceResponse<IncomingRelationshipCollection>> listIncomingRelationshipsWithServiceResponseAsync(String id);

    /**
     * Sends telemetry on behalf of a digital twin.
     Status codes:
     200 (OK): Success.
     400 (Bad Request): The request is invalid.
     404 (Not Found): There is no digital twin with the provided id.
     *
     * @param id The id of the digital twin. The id is unique within the service and case sensitive.
     * @param telemetry The telemetry measurements to send from the digital twin.
     * @param dtId A unique message identifier (in the scope of the digital twin id) that is commonly used for de-duplicating messages.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    void sendTelemetry(String id, Object telemetry, String dtId);

    /**
     * Sends telemetry on behalf of a digital twin.
     Status codes:
     200 (OK): Success.
     400 (Bad Request): The request is invalid.
     404 (Not Found): There is no digital twin with the provided id.
     *
     * @param id The id of the digital twin. The id is unique within the service and case sensitive.
     * @param telemetry The telemetry measurements to send from the digital twin.
     * @param dtId A unique message identifier (in the scope of the digital twin id) that is commonly used for de-duplicating messages.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Void> sendTelemetryAsync(String id, Object telemetry, String dtId, final ServiceCallback<Void> serviceCallback);

    /**
     * Sends telemetry on behalf of a digital twin.
     Status codes:
     200 (OK): Success.
     400 (Bad Request): The request is invalid.
     404 (Not Found): There is no digital twin with the provided id.
     *
     * @param id The id of the digital twin. The id is unique within the service and case sensitive.
     * @param telemetry The telemetry measurements to send from the digital twin.
     * @param dtId A unique message identifier (in the scope of the digital twin id) that is commonly used for de-duplicating messages.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> sendTelemetryAsync(String id, Object telemetry, String dtId);

    /**
     * Sends telemetry on behalf of a digital twin.
     Status codes:
     200 (OK): Success.
     400 (Bad Request): The request is invalid.
     404 (Not Found): There is no digital twin with the provided id.
     *
     * @param id The id of the digital twin. The id is unique within the service and case sensitive.
     * @param telemetry The telemetry measurements to send from the digital twin.
     * @param dtId A unique message identifier (in the scope of the digital twin id) that is commonly used for de-duplicating messages.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> sendTelemetryWithServiceResponseAsync(String id, Object telemetry, String dtId);
    /**
     * Sends telemetry on behalf of a digital twin.
     Status codes:
     200 (OK): Success.
     400 (Bad Request): The request is invalid.
     404 (Not Found): There is no digital twin with the provided id.
     *
     * @param id The id of the digital twin. The id is unique within the service and case sensitive.
     * @param telemetry The telemetry measurements to send from the digital twin.
     * @param dtId A unique message identifier (in the scope of the digital twin id) that is commonly used for de-duplicating messages.
     * @param dtTimestamp An RFC 3339 timestamp that identifies the time the telemetry was measured.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    void sendTelemetry(String id, Object telemetry, String dtId, String dtTimestamp);

    /**
     * Sends telemetry on behalf of a digital twin.
     Status codes:
     200 (OK): Success.
     400 (Bad Request): The request is invalid.
     404 (Not Found): There is no digital twin with the provided id.
     *
     * @param id The id of the digital twin. The id is unique within the service and case sensitive.
     * @param telemetry The telemetry measurements to send from the digital twin.
     * @param dtId A unique message identifier (in the scope of the digital twin id) that is commonly used for de-duplicating messages.
     * @param dtTimestamp An RFC 3339 timestamp that identifies the time the telemetry was measured.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Void> sendTelemetryAsync(String id, Object telemetry, String dtId, String dtTimestamp, final ServiceCallback<Void> serviceCallback);

    /**
     * Sends telemetry on behalf of a digital twin.
     Status codes:
     200 (OK): Success.
     400 (Bad Request): The request is invalid.
     404 (Not Found): There is no digital twin with the provided id.
     *
     * @param id The id of the digital twin. The id is unique within the service and case sensitive.
     * @param telemetry The telemetry measurements to send from the digital twin.
     * @param dtId A unique message identifier (in the scope of the digital twin id) that is commonly used for de-duplicating messages.
     * @param dtTimestamp An RFC 3339 timestamp that identifies the time the telemetry was measured.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> sendTelemetryAsync(String id, Object telemetry, String dtId, String dtTimestamp);

    /**
     * Sends telemetry on behalf of a digital twin.
     Status codes:
     200 (OK): Success.
     400 (Bad Request): The request is invalid.
     404 (Not Found): There is no digital twin with the provided id.
     *
     * @param id The id of the digital twin. The id is unique within the service and case sensitive.
     * @param telemetry The telemetry measurements to send from the digital twin.
     * @param dtId A unique message identifier (in the scope of the digital twin id) that is commonly used for de-duplicating messages.
     * @param dtTimestamp An RFC 3339 timestamp that identifies the time the telemetry was measured.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> sendTelemetryWithServiceResponseAsync(String id, Object telemetry, String dtId, String dtTimestamp);

    /**
     * Sends telemetry on behalf of a component in a digital twin.
     Status codes:
     200 (OK): Success.
     400 (Bad Request): The request is invalid.
     404 (Not Found): There is either no digital twin with the provided id or the component path is invalid.
     *
     * @param id The id of the digital twin. The id is unique within the service and case sensitive.
     * @param componentPath The name of the DTDL component.
     * @param telemetry The telemetry measurements to send from the digital twin's component.
     * @param dtId A unique message identifier (in the scope of the digital twin id) that is commonly used for de-duplicating messages.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    void sendComponentTelemetry(String id, String componentPath, Object telemetry, String dtId);

    /**
     * Sends telemetry on behalf of a component in a digital twin.
     Status codes:
     200 (OK): Success.
     400 (Bad Request): The request is invalid.
     404 (Not Found): There is either no digital twin with the provided id or the component path is invalid.
     *
     * @param id The id of the digital twin. The id is unique within the service and case sensitive.
     * @param componentPath The name of the DTDL component.
     * @param telemetry The telemetry measurements to send from the digital twin's component.
     * @param dtId A unique message identifier (in the scope of the digital twin id) that is commonly used for de-duplicating messages.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Void> sendComponentTelemetryAsync(String id, String componentPath, Object telemetry, String dtId, final ServiceCallback<Void> serviceCallback);

    /**
     * Sends telemetry on behalf of a component in a digital twin.
     Status codes:
     200 (OK): Success.
     400 (Bad Request): The request is invalid.
     404 (Not Found): There is either no digital twin with the provided id or the component path is invalid.
     *
     * @param id The id of the digital twin. The id is unique within the service and case sensitive.
     * @param componentPath The name of the DTDL component.
     * @param telemetry The telemetry measurements to send from the digital twin's component.
     * @param dtId A unique message identifier (in the scope of the digital twin id) that is commonly used for de-duplicating messages.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> sendComponentTelemetryAsync(String id, String componentPath, Object telemetry, String dtId);

    /**
     * Sends telemetry on behalf of a component in a digital twin.
     Status codes:
     200 (OK): Success.
     400 (Bad Request): The request is invalid.
     404 (Not Found): There is either no digital twin with the provided id or the component path is invalid.
     *
     * @param id The id of the digital twin. The id is unique within the service and case sensitive.
     * @param componentPath The name of the DTDL component.
     * @param telemetry The telemetry measurements to send from the digital twin's component.
     * @param dtId A unique message identifier (in the scope of the digital twin id) that is commonly used for de-duplicating messages.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> sendComponentTelemetryWithServiceResponseAsync(String id, String componentPath, Object telemetry, String dtId);
    /**
     * Sends telemetry on behalf of a component in a digital twin.
     Status codes:
     200 (OK): Success.
     400 (Bad Request): The request is invalid.
     404 (Not Found): There is either no digital twin with the provided id or the component path is invalid.
     *
     * @param id The id of the digital twin. The id is unique within the service and case sensitive.
     * @param componentPath The name of the DTDL component.
     * @param telemetry The telemetry measurements to send from the digital twin's component.
     * @param dtId A unique message identifier (in the scope of the digital twin id) that is commonly used for de-duplicating messages.
     * @param dtTimestamp An RFC 3339 timestamp that identifies the time the telemetry was measured.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    void sendComponentTelemetry(String id, String componentPath, Object telemetry, String dtId, String dtTimestamp);

    /**
     * Sends telemetry on behalf of a component in a digital twin.
     Status codes:
     200 (OK): Success.
     400 (Bad Request): The request is invalid.
     404 (Not Found): There is either no digital twin with the provided id or the component path is invalid.
     *
     * @param id The id of the digital twin. The id is unique within the service and case sensitive.
     * @param componentPath The name of the DTDL component.
     * @param telemetry The telemetry measurements to send from the digital twin's component.
     * @param dtId A unique message identifier (in the scope of the digital twin id) that is commonly used for de-duplicating messages.
     * @param dtTimestamp An RFC 3339 timestamp that identifies the time the telemetry was measured.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Void> sendComponentTelemetryAsync(String id, String componentPath, Object telemetry, String dtId, String dtTimestamp, final ServiceCallback<Void> serviceCallback);

    /**
     * Sends telemetry on behalf of a component in a digital twin.
     Status codes:
     200 (OK): Success.
     400 (Bad Request): The request is invalid.
     404 (Not Found): There is either no digital twin with the provided id or the component path is invalid.
     *
     * @param id The id of the digital twin. The id is unique within the service and case sensitive.
     * @param componentPath The name of the DTDL component.
     * @param telemetry The telemetry measurements to send from the digital twin's component.
     * @param dtId A unique message identifier (in the scope of the digital twin id) that is commonly used for de-duplicating messages.
     * @param dtTimestamp An RFC 3339 timestamp that identifies the time the telemetry was measured.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> sendComponentTelemetryAsync(String id, String componentPath, Object telemetry, String dtId, String dtTimestamp);

    /**
     * Sends telemetry on behalf of a component in a digital twin.
     Status codes:
     200 (OK): Success.
     400 (Bad Request): The request is invalid.
     404 (Not Found): There is either no digital twin with the provided id or the component path is invalid.
     *
     * @param id The id of the digital twin. The id is unique within the service and case sensitive.
     * @param componentPath The name of the DTDL component.
     * @param telemetry The telemetry measurements to send from the digital twin's component.
     * @param dtId A unique message identifier (in the scope of the digital twin id) that is commonly used for de-duplicating messages.
     * @param dtTimestamp An RFC 3339 timestamp that identifies the time the telemetry was measured.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> sendComponentTelemetryWithServiceResponseAsync(String id, String componentPath, Object telemetry, String dtId, String dtTimestamp);

    /**
     * Retrieves a component from a digital twin.
     Status codes:
     200 (OK): Success.
     404 (Not Found): There is either no digital twin with the provided id or the component path is invalid.
     *
     * @param id The id of the digital twin. The id is unique within the service and case sensitive.
     * @param componentPath The name of the DTDL component.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object getComponent(String id, String componentPath);

    /**
     * Retrieves a component from a digital twin.
     Status codes:
     200 (OK): Success.
     404 (Not Found): There is either no digital twin with the provided id or the component path is invalid.
     *
     * @param id The id of the digital twin. The id is unique within the service and case sensitive.
     * @param componentPath The name of the DTDL component.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> getComponentAsync(String id, String componentPath, final ServiceCallback<Object> serviceCallback);

    /**
     * Retrieves a component from a digital twin.
     Status codes:
     200 (OK): Success.
     404 (Not Found): There is either no digital twin with the provided id or the component path is invalid.
     *
     * @param id The id of the digital twin. The id is unique within the service and case sensitive.
     * @param componentPath The name of the DTDL component.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> getComponentAsync(String id, String componentPath);

    /**
     * Retrieves a component from a digital twin.
     Status codes:
     200 (OK): Success.
     404 (Not Found): There is either no digital twin with the provided id or the component path is invalid.
     *
     * @param id The id of the digital twin. The id is unique within the service and case sensitive.
     * @param componentPath The name of the DTDL component.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponseWithHeaders<Object, DigitalTwinsGetComponentHeaders>> getComponentWithServiceResponseAsync(String id, String componentPath);

    /**
     * Updates a component on a digital twin.
     Status codes:
     200 (OK): Success.
     400 (Bad Request): The request is invalid.
     404 (Not Found): There is either no digital twin with the provided id or the component path is invalid.
     *
     * @param id The id of the digital twin. The id is unique within the service and case sensitive.
     * @param componentPath The name of the DTDL component.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    void updateComponent(String id, String componentPath);

    /**
     * Updates a component on a digital twin.
     Status codes:
     200 (OK): Success.
     400 (Bad Request): The request is invalid.
     404 (Not Found): There is either no digital twin with the provided id or the component path is invalid.
     *
     * @param id The id of the digital twin. The id is unique within the service and case sensitive.
     * @param componentPath The name of the DTDL component.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Void> updateComponentAsync(String id, String componentPath, final ServiceCallback<Void> serviceCallback);

    /**
     * Updates a component on a digital twin.
     Status codes:
     200 (OK): Success.
     400 (Bad Request): The request is invalid.
     404 (Not Found): There is either no digital twin with the provided id or the component path is invalid.
     *
     * @param id The id of the digital twin. The id is unique within the service and case sensitive.
     * @param componentPath The name of the DTDL component.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponseWithHeaders} object if successful.
     */
    Observable<Void> updateComponentAsync(String id, String componentPath);

    /**
     * Updates a component on a digital twin.
     Status codes:
     200 (OK): Success.
     400 (Bad Request): The request is invalid.
     404 (Not Found): There is either no digital twin with the provided id or the component path is invalid.
     *
     * @param id The id of the digital twin. The id is unique within the service and case sensitive.
     * @param componentPath The name of the DTDL component.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponseWithHeaders} object if successful.
     */
    Observable<ServiceResponseWithHeaders<Void, DigitalTwinsUpdateComponentHeaders>> updateComponentWithServiceResponseAsync(String id, String componentPath);
    /**
     * Updates a component on a digital twin.
     Status codes:
     200 (OK): Success.
     400 (Bad Request): The request is invalid.
     404 (Not Found): There is either no digital twin with the provided id or the component path is invalid.
     *
     * @param id The id of the digital twin. The id is unique within the service and case sensitive.
     * @param componentPath The name of the DTDL component.
     * @param patchDocument An update specification described by JSON Patch. Updates to property values and $model elements may happen in the same request. Operations are limited to add, replace and remove.
     * @param ifMatch Only perform the operation if the entity's etag matches one of the etags provided or * is provided.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    void updateComponent(String id, String componentPath, List<Object> patchDocument, String ifMatch);

    /**
     * Updates a component on a digital twin.
     Status codes:
     200 (OK): Success.
     400 (Bad Request): The request is invalid.
     404 (Not Found): There is either no digital twin with the provided id or the component path is invalid.
     *
     * @param id The id of the digital twin. The id is unique within the service and case sensitive.
     * @param componentPath The name of the DTDL component.
     * @param patchDocument An update specification described by JSON Patch. Updates to property values and $model elements may happen in the same request. Operations are limited to add, replace and remove.
     * @param ifMatch Only perform the operation if the entity's etag matches one of the etags provided or * is provided.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Void> updateComponentAsync(String id, String componentPath, List<Object> patchDocument, String ifMatch, final ServiceCallback<Void> serviceCallback);

    /**
     * Updates a component on a digital twin.
     Status codes:
     200 (OK): Success.
     400 (Bad Request): The request is invalid.
     404 (Not Found): There is either no digital twin with the provided id or the component path is invalid.
     *
     * @param id The id of the digital twin. The id is unique within the service and case sensitive.
     * @param componentPath The name of the DTDL component.
     * @param patchDocument An update specification described by JSON Patch. Updates to property values and $model elements may happen in the same request. Operations are limited to add, replace and remove.
     * @param ifMatch Only perform the operation if the entity's etag matches one of the etags provided or * is provided.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponseWithHeaders} object if successful.
     */
    Observable<Void> updateComponentAsync(String id, String componentPath, List<Object> patchDocument, String ifMatch);

    /**
     * Updates a component on a digital twin.
     Status codes:
     200 (OK): Success.
     400 (Bad Request): The request is invalid.
     404 (Not Found): There is either no digital twin with the provided id or the component path is invalid.
     *
     * @param id The id of the digital twin. The id is unique within the service and case sensitive.
     * @param componentPath The name of the DTDL component.
     * @param patchDocument An update specification described by JSON Patch. Updates to property values and $model elements may happen in the same request. Operations are limited to add, replace and remove.
     * @param ifMatch Only perform the operation if the entity's etag matches one of the etags provided or * is provided.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponseWithHeaders} object if successful.
     */
    Observable<ServiceResponseWithHeaders<Void, DigitalTwinsUpdateComponentHeaders>> updateComponentWithServiceResponseAsync(String id, String componentPath, List<Object> patchDocument, String ifMatch);

}
