/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.azure.digitaltwins.core;

import com.azure.digitaltwins.core.models.ErrorResponseException;
import com.azure.digitaltwins.core.models.EventRoute;
import com.azure.digitaltwins.core.models.EventRouteCollection;
import com.azure.digitaltwins.core.models.EventRoutesListOptions;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import java.io.IOException;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in EventRoutes.
 */
public interface EventRoutes {
    /**
     * Retrieves all event routes.
     Status codes:
     200 (OK): Success.
     400 (Bad Request): The request is invalid.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the EventRouteCollection object if successful.
     */
    EventRouteCollection list();

    /**
     * Retrieves all event routes.
     Status codes:
     200 (OK): Success.
     400 (Bad Request): The request is invalid.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<EventRouteCollection> listAsync(final ServiceCallback<EventRouteCollection> serviceCallback);

    /**
     * Retrieves all event routes.
     Status codes:
     200 (OK): Success.
     400 (Bad Request): The request is invalid.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the EventRouteCollection object
     */
    Observable<EventRouteCollection> listAsync();

    /**
     * Retrieves all event routes.
     Status codes:
     200 (OK): Success.
     400 (Bad Request): The request is invalid.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the EventRouteCollection object
     */
    Observable<ServiceResponse<EventRouteCollection>> listWithServiceResponseAsync();
    /**
     * Retrieves all event routes.
     Status codes:
     200 (OK): Success.
     400 (Bad Request): The request is invalid.
     *
     * @param eventRoutesListOptions Additional parameters for the operation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the EventRouteCollection object if successful.
     */
    EventRouteCollection list(EventRoutesListOptions eventRoutesListOptions);

    /**
     * Retrieves all event routes.
     Status codes:
     200 (OK): Success.
     400 (Bad Request): The request is invalid.
     *
     * @param eventRoutesListOptions Additional parameters for the operation
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<EventRouteCollection> listAsync(EventRoutesListOptions eventRoutesListOptions, final ServiceCallback<EventRouteCollection> serviceCallback);

    /**
     * Retrieves all event routes.
     Status codes:
     200 (OK): Success.
     400 (Bad Request): The request is invalid.
     *
     * @param eventRoutesListOptions Additional parameters for the operation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the EventRouteCollection object
     */
    Observable<EventRouteCollection> listAsync(EventRoutesListOptions eventRoutesListOptions);

    /**
     * Retrieves all event routes.
     Status codes:
     200 (OK): Success.
     400 (Bad Request): The request is invalid.
     *
     * @param eventRoutesListOptions Additional parameters for the operation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the EventRouteCollection object
     */
    Observable<ServiceResponse<EventRouteCollection>> listWithServiceResponseAsync(EventRoutesListOptions eventRoutesListOptions);

    /**
     * Retrieves an event route.
     Status codes:
     200 (OK): Success.
     404 (Not Found): There is no event route with the provided id.
     *
     * @param id The id for an event route. The id is unique within event routes and case sensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the EventRoute object if successful.
     */
    EventRoute getById(String id);

    /**
     * Retrieves an event route.
     Status codes:
     200 (OK): Success.
     404 (Not Found): There is no event route with the provided id.
     *
     * @param id The id for an event route. The id is unique within event routes and case sensitive.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<EventRoute> getByIdAsync(String id, final ServiceCallback<EventRoute> serviceCallback);

    /**
     * Retrieves an event route.
     Status codes:
     200 (OK): Success.
     404 (Not Found): There is no event route with the provided id.
     *
     * @param id The id for an event route. The id is unique within event routes and case sensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the EventRoute object
     */
    Observable<EventRoute> getByIdAsync(String id);

    /**
     * Retrieves an event route.
     Status codes:
     200 (OK): Success.
     404 (Not Found): There is no event route with the provided id.
     *
     * @param id The id for an event route. The id is unique within event routes and case sensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the EventRoute object
     */
    Observable<ServiceResponse<EventRoute>> getByIdWithServiceResponseAsync(String id);

    /**
     * Adds or replaces an event route.
     Status codes:
     200 (OK): Success.
     400 (Bad Request): The request is invalid.
     *
     * @param id The id for an event route. The id is unique within event routes and case sensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    void add(String id);

    /**
     * Adds or replaces an event route.
     Status codes:
     200 (OK): Success.
     400 (Bad Request): The request is invalid.
     *
     * @param id The id for an event route. The id is unique within event routes and case sensitive.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Void> addAsync(String id, final ServiceCallback<Void> serviceCallback);

    /**
     * Adds or replaces an event route.
     Status codes:
     200 (OK): Success.
     400 (Bad Request): The request is invalid.
     *
     * @param id The id for an event route. The id is unique within event routes and case sensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> addAsync(String id);

    /**
     * Adds or replaces an event route.
     Status codes:
     200 (OK): Success.
     400 (Bad Request): The request is invalid.
     *
     * @param id The id for an event route. The id is unique within event routes and case sensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> addWithServiceResponseAsync(String id);
    /**
     * Adds or replaces an event route.
     Status codes:
     200 (OK): Success.
     400 (Bad Request): The request is invalid.
     *
     * @param id The id for an event route. The id is unique within event routes and case sensitive.
     * @param eventRoute The event route data
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    void add(String id, EventRoute eventRoute);

    /**
     * Adds or replaces an event route.
     Status codes:
     200 (OK): Success.
     400 (Bad Request): The request is invalid.
     *
     * @param id The id for an event route. The id is unique within event routes and case sensitive.
     * @param eventRoute The event route data
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Void> addAsync(String id, EventRoute eventRoute, final ServiceCallback<Void> serviceCallback);

    /**
     * Adds or replaces an event route.
     Status codes:
     200 (OK): Success.
     400 (Bad Request): The request is invalid.
     *
     * @param id The id for an event route. The id is unique within event routes and case sensitive.
     * @param eventRoute The event route data
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> addAsync(String id, EventRoute eventRoute);

    /**
     * Adds or replaces an event route.
     Status codes:
     200 (OK): Success.
     400 (Bad Request): The request is invalid.
     *
     * @param id The id for an event route. The id is unique within event routes and case sensitive.
     * @param eventRoute The event route data
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> addWithServiceResponseAsync(String id, EventRoute eventRoute);

    /**
     * Deletes an event route.
     Status codes:
     200 (OK): Success.
     404 (Not Found): There is no event route with the provided id.
     *
     * @param id The id for an event route. The id is unique within event routes and case sensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    void delete(String id);

    /**
     * Deletes an event route.
     Status codes:
     200 (OK): Success.
     404 (Not Found): There is no event route with the provided id.
     *
     * @param id The id for an event route. The id is unique within event routes and case sensitive.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Void> deleteAsync(String id, final ServiceCallback<Void> serviceCallback);

    /**
     * Deletes an event route.
     Status codes:
     200 (OK): Success.
     404 (Not Found): There is no event route with the provided id.
     *
     * @param id The id for an event route. The id is unique within event routes and case sensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> deleteAsync(String id);

    /**
     * Deletes an event route.
     Status codes:
     200 (OK): Success.
     404 (Not Found): There is no event route with the provided id.
     *
     * @param id The id for an event route. The id is unique within event routes and case sensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> deleteWithServiceResponseAsync(String id);

}
