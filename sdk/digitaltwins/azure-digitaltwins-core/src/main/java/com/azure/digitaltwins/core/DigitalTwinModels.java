/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.azure.digitaltwins.core;

import com.azure.digitaltwins.core.models.DigitalTwinModelsListOptions;
import com.azure.digitaltwins.core.models.ErrorResponseException;
import com.azure.digitaltwins.core.models.ModelData;
import com.azure.digitaltwins.core.models.PagedModelDataCollection;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import java.io.IOException;
import java.util.List;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in DigitalTwinModels.
 */
public interface DigitalTwinModels {
    /**
     * Uploads one or more models. When any error occurs, no models are uploaded.
     Status codes:
     200 (OK): Success.
     400 (Bad Request): The request is invalid.
     409 (Conflict): One or more of the provided models already exist.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;ModelData&gt; object if successful.
     */
    List<ModelData> add();

    /**
     * Uploads one or more models. When any error occurs, no models are uploaded.
     Status codes:
     200 (OK): Success.
     400 (Bad Request): The request is invalid.
     409 (Conflict): One or more of the provided models already exist.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<List<ModelData>> addAsync(final ServiceCallback<List<ModelData>> serviceCallback);

    /**
     * Uploads one or more models. When any error occurs, no models are uploaded.
     Status codes:
     200 (OK): Success.
     400 (Bad Request): The request is invalid.
     409 (Conflict): One or more of the provided models already exist.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;ModelData&gt; object
     */
    Observable<List<ModelData>> addAsync();

    /**
     * Uploads one or more models. When any error occurs, no models are uploaded.
     Status codes:
     200 (OK): Success.
     400 (Bad Request): The request is invalid.
     409 (Conflict): One or more of the provided models already exist.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;ModelData&gt; object
     */
    Observable<ServiceResponse<List<ModelData>>> addWithServiceResponseAsync();
    /**
     * Uploads one or more models. When any error occurs, no models are uploaded.
     Status codes:
     200 (OK): Success.
     400 (Bad Request): The request is invalid.
     409 (Conflict): One or more of the provided models already exist.
     *
     * @param models An array of models to add.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;ModelData&gt; object if successful.
     */
    List<ModelData> add(List<Object> models);

    /**
     * Uploads one or more models. When any error occurs, no models are uploaded.
     Status codes:
     200 (OK): Success.
     400 (Bad Request): The request is invalid.
     409 (Conflict): One or more of the provided models already exist.
     *
     * @param models An array of models to add.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<List<ModelData>> addAsync(List<Object> models, final ServiceCallback<List<ModelData>> serviceCallback);

    /**
     * Uploads one or more models. When any error occurs, no models are uploaded.
     Status codes:
     200 (OK): Success.
     400 (Bad Request): The request is invalid.
     409 (Conflict): One or more of the provided models already exist.
     *
     * @param models An array of models to add.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;ModelData&gt; object
     */
    Observable<List<ModelData>> addAsync(List<Object> models);

    /**
     * Uploads one or more models. When any error occurs, no models are uploaded.
     Status codes:
     200 (OK): Success.
     400 (Bad Request): The request is invalid.
     409 (Conflict): One or more of the provided models already exist.
     *
     * @param models An array of models to add.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;ModelData&gt; object
     */
    Observable<ServiceResponse<List<ModelData>>> addWithServiceResponseAsync(List<Object> models);

    /**
     * Retrieves model metadata and, optionally, model definitions.
     Status codes:
     200 (OK): Success.
     400 (Bad Request): The request is invalid.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedModelDataCollection object if successful.
     */
    PagedModelDataCollection list();

    /**
     * Retrieves model metadata and, optionally, model definitions.
     Status codes:
     200 (OK): Success.
     400 (Bad Request): The request is invalid.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<PagedModelDataCollection> listAsync(final ServiceCallback<PagedModelDataCollection> serviceCallback);

    /**
     * Retrieves model metadata and, optionally, model definitions.
     Status codes:
     200 (OK): Success.
     400 (Bad Request): The request is invalid.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedModelDataCollection object
     */
    Observable<PagedModelDataCollection> listAsync();

    /**
     * Retrieves model metadata and, optionally, model definitions.
     Status codes:
     200 (OK): Success.
     400 (Bad Request): The request is invalid.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedModelDataCollection object
     */
    Observable<ServiceResponse<PagedModelDataCollection>> listWithServiceResponseAsync();
    /**
     * Retrieves model metadata and, optionally, model definitions.
     Status codes:
     200 (OK): Success.
     400 (Bad Request): The request is invalid.
     *
     * @param dependenciesFor The set of the models which will have their dependencies retrieved. If omitted, all models are retrieved.
     * @param includeModelDefinition When true the model definition will be returned as part of the result.
     * @param digitalTwinModelsListOptions Additional parameters for the operation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedModelDataCollection object if successful.
     */
    PagedModelDataCollection list(List<String> dependenciesFor, Boolean includeModelDefinition, DigitalTwinModelsListOptions digitalTwinModelsListOptions);

    /**
     * Retrieves model metadata and, optionally, model definitions.
     Status codes:
     200 (OK): Success.
     400 (Bad Request): The request is invalid.
     *
     * @param dependenciesFor The set of the models which will have their dependencies retrieved. If omitted, all models are retrieved.
     * @param includeModelDefinition When true the model definition will be returned as part of the result.
     * @param digitalTwinModelsListOptions Additional parameters for the operation
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<PagedModelDataCollection> listAsync(List<String> dependenciesFor, Boolean includeModelDefinition, DigitalTwinModelsListOptions digitalTwinModelsListOptions, final ServiceCallback<PagedModelDataCollection> serviceCallback);

    /**
     * Retrieves model metadata and, optionally, model definitions.
     Status codes:
     200 (OK): Success.
     400 (Bad Request): The request is invalid.
     *
     * @param dependenciesFor The set of the models which will have their dependencies retrieved. If omitted, all models are retrieved.
     * @param includeModelDefinition When true the model definition will be returned as part of the result.
     * @param digitalTwinModelsListOptions Additional parameters for the operation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedModelDataCollection object
     */
    Observable<PagedModelDataCollection> listAsync(List<String> dependenciesFor, Boolean includeModelDefinition, DigitalTwinModelsListOptions digitalTwinModelsListOptions);

    /**
     * Retrieves model metadata and, optionally, model definitions.
     Status codes:
     200 (OK): Success.
     400 (Bad Request): The request is invalid.
     *
     * @param dependenciesFor The set of the models which will have their dependencies retrieved. If omitted, all models are retrieved.
     * @param includeModelDefinition When true the model definition will be returned as part of the result.
     * @param digitalTwinModelsListOptions Additional parameters for the operation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedModelDataCollection object
     */
    Observable<ServiceResponse<PagedModelDataCollection>> listWithServiceResponseAsync(List<String> dependenciesFor, Boolean includeModelDefinition, DigitalTwinModelsListOptions digitalTwinModelsListOptions);

    /**
     * Retrieves model metadata and optionally the model definition.
     Status codes:
     200 (OK): Success.
     404 (Not Found): There is no model with the provided id.
     *
     * @param id The id for the model. The id is globally unique and case sensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ModelData object if successful.
     */
    ModelData getById(String id);

    /**
     * Retrieves model metadata and optionally the model definition.
     Status codes:
     200 (OK): Success.
     404 (Not Found): There is no model with the provided id.
     *
     * @param id The id for the model. The id is globally unique and case sensitive.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<ModelData> getByIdAsync(String id, final ServiceCallback<ModelData> serviceCallback);

    /**
     * Retrieves model metadata and optionally the model definition.
     Status codes:
     200 (OK): Success.
     404 (Not Found): There is no model with the provided id.
     *
     * @param id The id for the model. The id is globally unique and case sensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ModelData object
     */
    Observable<ModelData> getByIdAsync(String id);

    /**
     * Retrieves model metadata and optionally the model definition.
     Status codes:
     200 (OK): Success.
     404 (Not Found): There is no model with the provided id.
     *
     * @param id The id for the model. The id is globally unique and case sensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ModelData object
     */
    Observable<ServiceResponse<ModelData>> getByIdWithServiceResponseAsync(String id);
    /**
     * Retrieves model metadata and optionally the model definition.
     Status codes:
     200 (OK): Success.
     404 (Not Found): There is no model with the provided id.
     *
     * @param id The id for the model. The id is globally unique and case sensitive.
     * @param includeModelDefinition When true the model definition will be returned as part of the result.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ModelData object if successful.
     */
    ModelData getById(String id, Boolean includeModelDefinition);

    /**
     * Retrieves model metadata and optionally the model definition.
     Status codes:
     200 (OK): Success.
     404 (Not Found): There is no model with the provided id.
     *
     * @param id The id for the model. The id is globally unique and case sensitive.
     * @param includeModelDefinition When true the model definition will be returned as part of the result.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<ModelData> getByIdAsync(String id, Boolean includeModelDefinition, final ServiceCallback<ModelData> serviceCallback);

    /**
     * Retrieves model metadata and optionally the model definition.
     Status codes:
     200 (OK): Success.
     404 (Not Found): There is no model with the provided id.
     *
     * @param id The id for the model. The id is globally unique and case sensitive.
     * @param includeModelDefinition When true the model definition will be returned as part of the result.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ModelData object
     */
    Observable<ModelData> getByIdAsync(String id, Boolean includeModelDefinition);

    /**
     * Retrieves model metadata and optionally the model definition.
     Status codes:
     200 (OK): Success.
     404 (Not Found): There is no model with the provided id.
     *
     * @param id The id for the model. The id is globally unique and case sensitive.
     * @param includeModelDefinition When true the model definition will be returned as part of the result.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ModelData object
     */
    Observable<ServiceResponse<ModelData>> getByIdWithServiceResponseAsync(String id, Boolean includeModelDefinition);

    /**
     * Updates the metadata for a model.
     Status codes:
     200 (OK): Success.
     400 (Bad Request): The request is invalid.
     404 (Not Found): There is no model with the provided id.
     *
     * @param id The id for the model. The id is globally unique and case sensitive.
     * @param updateModel An update specification described by JSON Patch. Only the decommissioned property can be replaced.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    void update(String id, List<Object> updateModel);

    /**
     * Updates the metadata for a model.
     Status codes:
     200 (OK): Success.
     400 (Bad Request): The request is invalid.
     404 (Not Found): There is no model with the provided id.
     *
     * @param id The id for the model. The id is globally unique and case sensitive.
     * @param updateModel An update specification described by JSON Patch. Only the decommissioned property can be replaced.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Void> updateAsync(String id, List<Object> updateModel, final ServiceCallback<Void> serviceCallback);

    /**
     * Updates the metadata for a model.
     Status codes:
     200 (OK): Success.
     400 (Bad Request): The request is invalid.
     404 (Not Found): There is no model with the provided id.
     *
     * @param id The id for the model. The id is globally unique and case sensitive.
     * @param updateModel An update specification described by JSON Patch. Only the decommissioned property can be replaced.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> updateAsync(String id, List<Object> updateModel);

    /**
     * Updates the metadata for a model.
     Status codes:
     200 (OK): Success.
     400 (Bad Request): The request is invalid.
     404 (Not Found): There is no model with the provided id.
     *
     * @param id The id for the model. The id is globally unique and case sensitive.
     * @param updateModel An update specification described by JSON Patch. Only the decommissioned property can be replaced.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> updateWithServiceResponseAsync(String id, List<Object> updateModel);

    /**
     * Deletes a model. A model can only be deleted if no other models reference it.
     Status codes:
     204 (No Content): Success.
     400 (Bad Request): The request is invalid.
     404 (Not Found): There is no model with the provided id.
     409 (Conflict): There are dependencies on the model that prevent it from being deleted.
     *
     * @param id The id for the model. The id is globally unique and case sensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    void delete(String id);

    /**
     * Deletes a model. A model can only be deleted if no other models reference it.
     Status codes:
     204 (No Content): Success.
     400 (Bad Request): The request is invalid.
     404 (Not Found): There is no model with the provided id.
     409 (Conflict): There are dependencies on the model that prevent it from being deleted.
     *
     * @param id The id for the model. The id is globally unique and case sensitive.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Void> deleteAsync(String id, final ServiceCallback<Void> serviceCallback);

    /**
     * Deletes a model. A model can only be deleted if no other models reference it.
     Status codes:
     204 (No Content): Success.
     400 (Bad Request): The request is invalid.
     404 (Not Found): There is no model with the provided id.
     409 (Conflict): There are dependencies on the model that prevent it from being deleted.
     *
     * @param id The id for the model. The id is globally unique and case sensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> deleteAsync(String id);

    /**
     * Deletes a model. A model can only be deleted if no other models reference it.
     Status codes:
     204 (No Content): Success.
     400 (Bad Request): The request is invalid.
     404 (Not Found): There is no model with the provided id.
     409 (Conflict): There are dependencies on the model that prevent it from being deleted.
     *
     * @param id The id for the model. The id is globally unique and case sensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> deleteWithServiceResponseAsync(String id);

}
