/**
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package com.azure.digitaltwins.core;

import com.azure.digitaltwins.core.models.ErrorResponseException;
import com.azure.digitaltwins.core.models.QueryQueryTwinsHeaders;
import com.azure.digitaltwins.core.models.QueryResult;
import com.azure.digitaltwins.core.models.QuerySpecification;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponseWithHeaders;
import java.io.IOException;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in Querys.
 */
public interface Querys {
    /**
     * Executes a query that allows traversing relationships and filtering by property values.
     Status codes:
     200 (OK): Success.
     400 (Bad Request): The request is invalid.
     *
     * @param querySpecification The query specification to execute.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the QueryResult object if successful.
     */
    QueryResult queryTwins(QuerySpecification querySpecification);

    /**
     * Executes a query that allows traversing relationships and filtering by property values.
     Status codes:
     200 (OK): Success.
     400 (Bad Request): The request is invalid.
     *
     * @param querySpecification The query specification to execute.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<QueryResult> queryTwinsAsync(QuerySpecification querySpecification, final ServiceCallback<QueryResult> serviceCallback);

    /**
     * Executes a query that allows traversing relationships and filtering by property values.
     Status codes:
     200 (OK): Success.
     400 (Bad Request): The request is invalid.
     *
     * @param querySpecification The query specification to execute.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the QueryResult object
     */
    Observable<QueryResult> queryTwinsAsync(QuerySpecification querySpecification);

    /**
     * Executes a query that allows traversing relationships and filtering by property values.
     Status codes:
     200 (OK): Success.
     400 (Bad Request): The request is invalid.
     *
     * @param querySpecification The query specification to execute.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the QueryResult object
     */
    Observable<ServiceResponseWithHeaders<QueryResult, QueryQueryTwinsHeaders>> queryTwinsWithServiceResponseAsync(QuerySpecification querySpecification);

}
